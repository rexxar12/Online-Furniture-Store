package com.example.demo.controllers;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.dto.ProductDTO;
import com.example.demo.entities.Product;
import com.example.demo.entities.Seller;
import com.example.demo.services.ProductService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/sellers")
public class ProductController {

    private final ProductService productService;

    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    @PostMapping(value = "/products", consumes = { "multipart/form-data" })
    public Product addProduct(@ModelAttribute Product product, @RequestParam("image") MultipartFile image, @RequestParam("sellerId") int sellerId) throws IOException {
        Product newProduct = productService.addProduct(product, image, sellerId);
        return newProduct;
    }
    
    @GetMapping("/search")
    public List<ProductDTO> searchProductsByCategory(@RequestParam String category) 
    {
    	 List<Product> products = productService.searchProductsByCategory(category);
    	 List<ProductDTO> productDTOs = new ArrayList<>();
    	 for (Product product : products) {
    	        ProductDTO productDTO = new ProductDTO();
    	        productDTO.setPid(product.getPid());
    	        productDTO.setPname(product.getPname());
    	        productDTO.setDescription(product.getDescription());
    	        productDTO.setCategory(product.getCategory());
    	        
    	        productDTO.setProductImage(product.getProductImage());
    	        
    	        productDTOs.add(productDTO);
    	    }
    	    return productDTOs;
    }
}



















//@CrossOrigin(origins = "http://localhost:3000")
//@RestController
//@RequestMapping("/api/sellers")
//public class ProductController {
//
//    private final ProductService productService;
//    
//    public ProductController(ProductService productService) {
//        this.productService = productService;
//    }
//
//    @PostMapping("/products")
//    public Product addProduct(@RequestBody Product product, @RequestParam("sellerId") int sellerId) {
//        Product newProduct = productService.addProduct(product, sellerId);
//        return newProduct;
//    }
//}
